<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
	xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"
	xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
	xmlns:local="clr-namespace:WPFShared">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary
			Source="/WPFShared;component/SharedResources.xaml" />
	</ResourceDictionary.MergedDictionaries>
	<Style
		x:Key="{x:Type local:DialogOverlay}"
		TargetType="{x:Type local:DialogOverlay}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:DialogOverlay}">
					<Grid
						x:Name="backdrop"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						Background="#80000000">
						<Grid
							HorizontalAlignment="{TemplateBinding local:DialogOverlay.DialogHorizontalAlignment}"
							VerticalAlignment="{TemplateBinding local:DialogOverlay.DialogVerticalAlignment}"
							Margin="{TemplateBinding local:DialogOverlay.DialogMargin}">
							<Grid.RowDefinitions>
								<RowDefinition
									MinHeight="{TemplateBinding FrameworkElement.MinHeight}" />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									MinWidth="{TemplateBinding FrameworkElement.MinWidth}" />
							</Grid.ColumnDefinitions>
							<Border
								BorderBrush="{TemplateBinding local:DialogOverlay.BorderColor}"
								Background="#FFDCDCDC"
								BorderThickness="3"
								Width="Auto"
								Height="Auto"
								CornerRadius="5">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition
											Height="Auto" />
										<RowDefinition />
									</Grid.RowDefinitions>
									<Grid
										Row="0">
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition
												Width="Auto" />
											<ColumnDefinition
												Width="Auto" />
											<ColumnDefinition
												Width="Auto" />
										</Grid.ColumnDefinitions>
										<StackPanel
											HorizontalAlignment="Stretch"
											Background="{TemplateBinding local:DialogOverlay.BorderColor}"
											Margin="0"
											Grid.Column="0"
											Grid.ColumnSpan="4" />
										<TextBlock
											Text="{TemplateBinding local:DialogOverlay.Title}"
											FontWeight="Bold"
											Foreground="#FFFFFFFF"
											VerticalAlignment="Bottom"
											Margin="5 3 0 0"
											Grid.Column="0" />
										<Button
											CommandParameter="left"
											Height="13"
											HorizontalAlignment="Center"
											Margin="1 0"
											Grid.Column="1"
											Command="{Binding Path=MoveDialogCommand, RelativeSource={RelativeSource TemplatedParent}}"
											Visibility="{Binding Path=ShowDialogAlignButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}">
											<Control.Template>
												<ControlTemplate>
													<Path
														Data="M0,0 L-5,0 L-10,6 L-5,12 L0,12 Z"
														Fill="#AAAAAAAA"
														Stroke="#DDDDDDDD"
														StrokeThickness="1"
														StrokeLineJoin="Miter" />
												</ControlTemplate>
											</Control.Template>
										</Button>
										<Button
											CommandParameter="center"
											Height="13"
											HorizontalAlignment="Center"
											Margin="1 0"
											Grid.Column="2"
											Command="{Binding Path=MoveDialogCommand, RelativeSource={RelativeSource TemplatedParent}}"
											Visibility="{Binding Path=ShowDialogAlignButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}">
											<Control.Template>
												<ControlTemplate>
													<Path
														Data="M0,0 L8,0 L8,12 L0,12 Z"
														Fill="#AAAAAAAA"
														Stroke="#DDDDDDDD"
														StrokeThickness="1"
														StrokeLineJoin="Miter" />
												</ControlTemplate>
											</Control.Template>
										</Button>
										<Button
											CommandParameter="right"
											Height="13"
											HorizontalAlignment="Center"
											Margin="1 0"
											Grid.Column="3"
											Command="{Binding Path=MoveDialogCommand, RelativeSource={RelativeSource TemplatedParent}}"
											Visibility="{Binding Path=ShowDialogAlignButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}">
											<Control.Template>
												<ControlTemplate>
													<Path
														Data="M0,0 L5,0 L10,6 L5,12 L0,12 Z"
														Fill="#AAAAAAAA"
														Stroke="#DDDDDDDD"
														StrokeThickness="1"
														StrokeLineJoin="Miter" />
												</ControlTemplate>
											</Control.Template>
										</Button>
									</Grid>
									<ContentControl
										Content="{TemplateBinding ContentControl.Content}"
										Width="{TemplateBinding local:DialogOverlay.ContentWidth}"
										Height="{TemplateBinding local:DialogOverlay.ContentHeight}"
										Margin="5"
										HorizontalContentAlignment="Stretch"
										VerticalContentAlignment="Stretch"
										Grid.Row="1" />
								</Grid>
							</Border>
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="{x:Type local:DialogEditor}"
		TargetType="{x:Type local:DialogEditor}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:DialogEditor}">
					<local:DialogOverlay
						Title="{TemplateBinding local:DialogOverlay.Title}"
						ContentWidth="{TemplateBinding local:DialogOverlay.ContentWidth}"
						ContentHeight="{TemplateBinding local:DialogOverlay.ContentHeight}"
						DialogHorizontalAlignment="{TemplateBinding local:DialogOverlay.DialogHorizontalAlignment}"
						DialogVerticalAlignment="{TemplateBinding local:DialogOverlay.DialogVerticalAlignment}"
						DialogMargin="{TemplateBinding local:DialogOverlay.DialogMargin}"
						ShowDialogAlignButtons="{TemplateBinding local:DialogOverlay.ShowDialogAlignButtons}"
						Visibility="{TemplateBinding UIElement.Visibility}"
						VisibilityChangedCommand="{TemplateBinding local:DialogOverlay.VisibilityChangedCommand}">
						<Grid
							Margin="0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch">
							<FrameworkElement.Resources>
								<ResourceDictionary>
									<ResourceDictionary.MergedDictionaries>
										<ResourceDictionary
											Source="/WPFShared;component/Styles/EditorStyles.xaml" />
									</ResourceDictionary.MergedDictionaries>
								</ResourceDictionary>
							</FrameworkElement.Resources>
							<ContentControl
								Content="{TemplateBinding ContentControl.Content}"
								Width="{TemplateBinding local:DialogOverlay.ContentWidth}"
								Height="{TemplateBinding local:DialogOverlay.ContentHeight}"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Stretch" />
						</Grid>
					</local:DialogOverlay>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="{x:Type local:SimpleDialog}"
		TargetType="{x:Type local:SimpleDialog}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:SimpleDialog}">
					<local:DialogOverlay
						Title="{TemplateBinding local:DialogOverlay.Title}"
						BorderColor="{TemplateBinding local:DialogOverlay.BorderColor}"
						ContentWidth="{TemplateBinding local:DialogOverlay.ContentWidth}"
						ContentHeight="{TemplateBinding local:DialogOverlay.ContentHeight}"
						Visibility="{TemplateBinding UIElement.Visibility}"
						VisibilityChangedCommand="{TemplateBinding local:DialogOverlay.VisibilityChangedCommand}">
						<StackPanel>
							<TextBlock
								Text="{TemplateBinding local:SimpleDialog.Message}"
								TextWrapping="Wrap"
								Margin="5 10" />
							<StackPanel
								Orientation="Horizontal"
								HorizontalAlignment="Right"
								Margin="5 5">
								<Button
									Content="{TemplateBinding local:SimpleDialog.OKButtonText}"
									FontSize="13"
									MinWidth="60"
									Visibility="{Binding Path=ShowOKButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}"
									Command="{Binding Path=InternalOKCommand, RelativeSource={RelativeSource TemplatedParent}}" />
								<Button
									Content="{TemplateBinding local:SimpleDialog.CancelButtonText}"
									FontSize="13"
									MinWidth="60"
									Margin="10 0 0 0"
									Visibility="{Binding Path=ShowCancelButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}"
									Command="{Binding Path=InternalCancelCommand, RelativeSource={RelativeSource TemplatedParent}}" />
							</StackPanel>
						</StackPanel>
					</local:DialogOverlay>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="{x:Type local:TimeSpanPicker}"
		TargetType="{x:Type local:TimeSpanPicker}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:TimeSpanPicker}">
					<Border
						Background="{TemplateBinding Control.Background}"
						BorderBrush="{TemplateBinding Control.BorderBrush}"
						BorderThickness="{TemplateBinding Control.BorderThickness}">
						<StackPanel
							Orientation="Horizontal">
							<extToolkit:IntegerUpDown
								ShowButtonSpinner="False"
								Padding="0"
								Margin="0"
								Height="{TemplateBinding FrameworkElement.Height}"
								Minimum="-1"
								Width="24"
								Value="{Binding Path=Hours, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|3, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}"
								Maximum="{Binding Path=MaxHours, RelativeSource={RelativeSource TemplatedParent}}">
								<i:Interaction.Triggers>
									<i:EventTrigger
										EventName="GotKeyboardFocus">
										<cmd:EventToCommand
											CommandParameter="3"
											Command="{Binding SetPositionCommand, RelativeSource={RelativeSource TemplatedParent}}" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</extToolkit:IntegerUpDown>
							<TextBlock
								Text="h "
								Height="20"
								Margin="2 4"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|3, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}" />
							<extToolkit:IntegerUpDown
								ShowButtonSpinner="False"
								Height="{TemplateBinding FrameworkElement.Height}"
								Minimum="-1"
								Width="24"
								Value="{Binding Path=Minutes, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|2, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}"
								Maximum="{Binding Path=MaxMinutes, RelativeSource={RelativeSource TemplatedParent}}">
								<i:Interaction.Triggers>
									<i:EventTrigger
										EventName="GotKeyboardFocus">
										<cmd:EventToCommand
											CommandParameter="2"
											Command="{Binding SetPositionCommand, RelativeSource={RelativeSource TemplatedParent}}" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</extToolkit:IntegerUpDown>
							<TextBlock
								Text="m "
								Height="20"
								Margin="2 4"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|2, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}" />
							<extToolkit:IntegerUpDown
								ShowButtonSpinner="False"
								Height="{TemplateBinding FrameworkElement.Height}"
								Minimum="-1"
								Width="24"
								Value="{Binding Path=Seconds, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|1, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}"
								Maximum="{Binding Path=MaxSeconds, RelativeSource={RelativeSource TemplatedParent}}">
								<i:Interaction.Triggers>
									<i:EventTrigger
										EventName="GotKeyboardFocus">
										<cmd:EventToCommand
											CommandParameter="1"
											Command="{Binding SetPositionCommand, RelativeSource={RelativeSource TemplatedParent}}" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</extToolkit:IntegerUpDown>
							<TextBlock
								Text="s "
								Height="20"
								Margin="2 4"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|1, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}" />
							<extToolkit:IntegerUpDown
								ShowButtonSpinner="False"
								Height="{TemplateBinding FrameworkElement.Height}"
								Minimum="-1"
								Maximum="999"
								Width="36"
								Value="{Binding Path=Milliseconds, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|0, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}">
								<i:Interaction.Triggers>
									<i:EventTrigger
										EventName="GotKeyboardFocus">
										<cmd:EventToCommand
											CommandParameter="0"
											Command="{Binding SetPositionCommand, RelativeSource={RelativeSource TemplatedParent}}" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</extToolkit:IntegerUpDown>
							<TextBlock
								Text="ms "
								Height="20"
								Margin="2 4"
								Visibility="{Binding Path=MinimumInterval, ConverterParameter=0|0, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterInRangeToVisibility}}" />
							<StackPanel
								Height="20"
								Margin="2 0 0 0"
								VerticalAlignment="Center">
								<Button>
									<i:Interaction.Triggers>
										<i:EventTrigger
											EventName="Click">
											<cmd:EventToCommand
												Command="{Binding IncreaseValueCommand, RelativeSource={RelativeSource TemplatedParent}}" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<Control.Template>
										<ControlTemplate>
											<Image
												Source="/WPFShared;component/Resources/SpinnerUp.png"
												Height="8"
												Margin="1" />
										</ControlTemplate>
									</Control.Template>
								</Button>
								<Button>
									<i:Interaction.Triggers>
										<i:EventTrigger
											EventName="Click">
											<cmd:EventToCommand
												Command="{Binding DecreaseValueCommand, RelativeSource={RelativeSource TemplatedParent}}" />
										</i:EventTrigger>
									</i:Interaction.Triggers>
									<Control.Template>
										<ControlTemplate>
											<Image
												Source="/WPFShared;component/Resources/SpinnerDown.png"
												Height="8"
												Margin="1" />
										</ControlTemplate>
									</Control.Template>
								</Button>
							</StackPanel>
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="TreeListItemStyle"
		TargetType="{x:Type local:TreeListItem}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:TreeListItem}">
					<FrameworkTemplate.Resources>
						<ResourceDictionary>
							<Style
								x:Key="ExpandedNodePath"
								TargetType="{x:Type Path}">
								<Setter
									Property="Data"
									Value="M0,8 L6,8 L6,0 Z" />
								<Setter
									Property="Stroke"
									Value="#440000FF" />
								<Setter
									Property="Fill"
									Value="#880000FF" />
								<Setter
									Property="StrokeThickness"
									Value="1" />
								<Setter
									Property="Shape.StrokeLineJoin"
									Value="Miter" />
							</Style>
							<Style
								x:Key="HoverNodePath"
								TargetType="{x:Type Path}">
								<Setter
									Property="Data"
									Value="M6,4 L0,0 L0,8 Z" />
								<Setter
									Property="Stroke"
									Value="#FF989898" />
								<Setter
									Property="Fill"
									Value="#880000FF" />
								<Setter
									Property="StrokeThickness"
									Value="1" />
								<Setter
									Property="Shape.StrokeLineJoin"
									Value="Miter" />
							</Style>
							<Style
								x:Key="CollapsedNodePath"
								TargetType="{x:Type Path}">
								<Setter
									Property="Data"
									Value="M6,4 L0,0 L0,8 Z" />
								<Setter
									Property="Stroke"
									Value="#FF989898" />
								<Setter
									Property="StrokeThickness"
									Value="1" />
								<Setter
									Property="Shape.StrokeLineJoin"
									Value="Miter" />
							</Style>
						</ResourceDictionary>
					</FrameworkTemplate.Resources>
					<Border
						HorizontalAlignment="Stretch">
						<Grid
							HorizontalAlignment="Left"
							Background="#00000000">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="Auto" />
								<ColumnDefinition />
							</Grid.ColumnDefinitions>
							<Grid
								x:Name="ExpanderButton"
								IsHitTestVisible="True"
								Background="#00000000"
								VerticalAlignment="Stretch"
								HorizontalAlignment="Center"
								Width="16"
								Visibility="{Binding Path=Node.DataItem.HasTreeChildren, ConverterParameter=visible|hidden, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ConverterBooleanToVisibility}}"
								Margin="{Binding Indention, RelativeSource={RelativeSource TemplatedParent}}">
								<Path
									x:Name="DrillPath"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Style="{StaticResource CollapsedNodePath}" />
							</Grid>
							<ContentPresenter
								x:Name="cp"
								Grid.Column="1"
								Focusable="True" />
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="{x:Type local:TreeList}"
		TargetType="{x:Type local:TreeList}">
		<Setter
			Property="ItemContainerStyle"
			Value="{StaticResource TreeListItemStyle}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type local:TreeList}">
					<Border
						Background="{TemplateBinding Control.Background}"
						BorderBrush="{TemplateBinding Control.BorderBrush}"
						BorderThickness="{TemplateBinding Control.BorderThickness}">
						<ScrollViewer
							VerticalScrollBarVisibility="Auto"
							HorizontalScrollBarVisibility="Auto"
							Focusable="False"
							IsTabStop="True">
							<ItemsPresenter
								Focusable="True" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
